{"ast":null,"code":"var _jsxFileName = \"/home/mario/Desktop/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport \"./app.css\";\n/*this object will have your keys and the base urs*/\n\n/* please get your key from openweathermap.org*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = {\n  key: \"69dfae742d38c6fd4cdf34760b0e3b91\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n  _s();\n\n  const cities = [\"Select a City\", \"Bishkek\", \"california\", \"Sonsonate\"];\n  {\n    /*you can add more cities here*/\n  } // im giving you one useState that is with the start value of the cities index[1]\n\n  const [selectedCity, setSelectedCity] = useState(cities[1]); // maybe after calling the API in use effect you will need to save the information in another useState\n\n  const [weather, setWeather] = useState(\"\"); // remeber every time the city changes you need to call the api with the new data\n  //\n\n  useEffect(() => {\n    const data = callToApi();\n  }, [selectedCity]);\n  /*create a fuction to call the api*/\n\n  /* here you have a model of the api*/\n\n  /* `${api.base}weather?q=${selectedCity}&units=metric&APPID=${api.key}`*/\n\n  const callToApi = async () => {\n    const resq = await axios.get(`${api.base}weather?q=${selectedCity}&units=metric&APPID=${api.key}`);\n    setWeather(resq.data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: typeof weather.main != \"undefined\" ? weather.main.temp > 12 ? \"container warm\" : \"container\" : \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: typeof weather.main != \"undefined\" ? weather.main.temp > 12 ? \"app warm\" : \"app\" : \"app\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location\",\n            children: weather.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temp\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: Math.round(weather.main.temp)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"situation\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: weather.weather[0].main\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 19\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-area\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"custom-select\",\n            value: selectedCity,\n            onChange: e => {\n              setSelectedCity(e.target.value);\n            },\n            children: cities.map((city, i) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: cities[i],\n                children: city\n              }, city, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qn91kcRW1cjbpT4/rUn4clLGLQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mario/Desktop/weather-app/src/App.js"],"names":["axios","useState","useEffect","api","key","base","App","cities","selectedCity","setSelectedCity","weather","setWeather","data","callToApi","resq","get","main","temp","name","Math","round","e","target","value","map","city","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA;;AACA;;;AACA,MAAMC,GAAG,GAAG;AACVC,EAAAA,GAAG,EAAE,kCADK;AAEVC,EAAAA,IAAI,EAAE;AAFI,CAAZ;;AAKA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,MAAM,GAAG,CAAC,eAAD,EAAkB,SAAlB,EAA6B,YAA7B,EAA2C,WAA3C,CAAf;AACA;AACE;AACD,GAJY,CAMb;;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAACM,MAAM,CAAC,CAAD,CAAP,CAAhD,CAPa,CAQb;;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CATa,CAWb;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,IAAI,GAAGC,SAAS,EAAtB;AACD,GAFQ,EAEN,CAACL,YAAD,CAFM,CAAT;AAIA;;AACA;;AACA;;AAEA,QAAMK,SAAS,GAAG,YAAY;AAC5B,UAAMC,IAAI,GAAG,MAAMd,KAAK,CAACe,GAAN,CAChB,GAAEZ,GAAG,CAACE,IAAK,aAAYG,YAAa,uBAAsBL,GAAG,CAACC,GAAI,EADlD,CAAnB;AAGAO,IAAAA,UAAU,CAACG,IAAI,CAACF,IAAN,CAAV;AACD,GALD;;AAOA,sBACE;AACE,IAAA,SAAS,EACP,OAAOF,OAAO,CAACM,IAAf,IAAuB,WAAvB,GACIN,OAAO,CAACM,IAAR,CAAaC,IAAb,GAAoB,EAApB,GACE,gBADF,GAEE,WAHN,GAII,WANR;AAAA,2BASE;AACE,MAAA,SAAS,EACP,OAAOP,OAAO,CAACM,IAAf,IAAuB,WAAvB,GAAsCN,OAAO,CAACM,IAAR,CAAaC,IAAb,GAAoB,EAApB,GAAyB,UAAzB,GAAsC,KAA5E,GAAqF,KAFzF;AAAA,6BAKE;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,sBAA2BP,OAAO,CAACQ;AAAnC;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,sCACE;AAAA,0BAAKC,IAAI,CAACC,KAAL,CAAWV,OAAO,CAACM,IAAR,CAAaC,IAAxB;AAAL;AAAA;AAAA;AAAA;AAAA,sBADF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAA,qCACE;AAAK,gBAAA,SAAS,EAAC,WAAf;AAAA,wCACE;AAAA,4BAAKP,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBM;AAAxB;AAAA;AAAA;AAAA;AAAA,wBADF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAeE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,qBACG,GADH,eAKE;AACE,YAAA,SAAS,EAAC,eADZ;AAEE,YAAA,KAAK,EAAER,YAFT;AAGE,YAAA,QAAQ,EAAGa,CAAD,IAAO;AACfZ,cAAAA,eAAe,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACD,aALH;AAAA,sBAQGhB,MAAM,CAACiB,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,KAAa;AACvB,kCACE;AAAmB,gBAAA,KAAK,EAAEnB,MAAM,CAACmB,CAAD,CAAhC;AAAA,0BACGD;AADH,iBAAaA,IAAb;AAAA;AAAA;AAAA;AAAA,sBADF;AAKD,aANA;AARH;AAAA;AAAA;AAAA;AAAA,kBALF,eAqBE;AAAA;AAAA;AAAA;AAAA,kBArBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,UADF;AAyDD;;GArFQnB,G;;KAAAA,G;AAuFT,eAAeA,GAAf","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport \"./app.css\";\n/*this object will have your keys and the base urs*/\n/* please get your key from openweathermap.org*/\nconst api = {\n  key: \"69dfae742d38c6fd4cdf34760b0e3b91\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const cities = [\"Select a City\", \"Bishkek\", \"california\", \"Sonsonate\"];\n  {\n    /*you can add more cities here*/\n  }\n\n  // im giving you one useState that is with the start value of the cities index[1]\n  const [selectedCity, setSelectedCity] = useState(cities[1]);\n  // maybe after calling the API in use effect you will need to save the information in another useState\n  const [weather, setWeather] = useState(\"\");\n\n  // remeber every time the city changes you need to call the api with the new data\n  //\n  useEffect(() => {\n    const data = callToApi();\n  }, [selectedCity]);\n\n  /*create a fuction to call the api*/\n  /* here you have a model of the api*/\n  /* `${api.base}weather?q=${selectedCity}&units=metric&APPID=${api.key}`*/\n\n  const callToApi = async () => {\n    const resq = await axios.get(\n      `${api.base}weather?q=${selectedCity}&units=metric&APPID=${api.key}`\n    );\n    setWeather(resq.data);\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 12\n            ? \"container warm\"\n            : \"container\"\n          : \"container\"\n      }\n    >\n      <div\n        className={\n          typeof weather.main != \"undefined\" ? (weather.main.temp > 12 ? \"app warm\" : \"app\") : \"app\"\n        }\n      >\n        <main>\n          <div className=\"top\">\n            <div className=\"location\">{weather.name}</div>\n            {/* render The city*/}\n            <div>\n              <div className=\"temp\">\n                <h2>{Math.round(weather.main.temp)}</h2> {/*render the temperature*/}\n              </div>\n              <div>\n                <div className=\"situation\">\n                  <h3>{weather.weather[0].main}</h3> {/*render Situation*/}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"select-area\">\n            {\" \"}\n            {/*create a selector to show the cities\n            on change you need to update your selectedCity\n*/}\n            <select\n              className=\"custom-select\"\n              value={selectedCity}\n              onChange={(e) => {\n                setSelectedCity(e.target.value);\n              }}\n            >\n              {/* we need to map our cities in order to show the options */}\n              {cities.map((city, i) => {\n                return (\n                  <option key={city} value={cities[i]}>\n                    {city}\n                  </option>\n                );\n              })}\n            </select>\n            <br />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}